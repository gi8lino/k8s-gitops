---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 19.1.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 5m
  values:
    alertmanager:
      config:
        global:
          resolve_timeout: 10m
        route:
          group_by:
            - job
          group_interval: 5m
          group_wait: 90s
          receiver: slack  # default receiver
          repeat_interval: 2h
          routes:
            - match:
                alertname: Watchdog
              receiver: healthchecks
              repeat_interval: 15m
            - receiver: slack
      ingress:
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: traefik-allow-lan-only@kubernetescrd,traefik-forward-auth@kubernetescrd
        enabled: true
        hosts:
          - alertmanager.local.${BASE_DOMAIN}
        ingressClassName: traefik
        pathType: Prefix
        paths:
          - /
    defaultRules:
      rules:
        etcd: false
        kubeScheduler: false
        kubernetesResources: false
    grafana:
      envFromSecret: kube-prometheus-stack-grafana-auth
      adminPassword: $__env{GRAFANA_ADMIN_PASSWORD}
      defaultDashboardsTimezone: browser
      analytics:
        check_for_updates: false
      grafana.ini:
        auth:
          disable_login_form: true
          oauth_auto_login: true
        auth.basic:
          enabled: false
        auth.generic_oauth:
          enabled: true
          allow_sign_up: false
          auth_url: https://sso.${BASE_DOMAIN}/auth/realms/master/protocol/openid-connect/auth
          client_id: $__env{GRAFANA_AUTH_CLIENT_ID}
          client_secret: $__env{GRAFANA_AUTH_CLIENT_SECRET}
          name: ${BASE_DOMAIN} SSO
          scopes: openid profile email roles
          signout_redirect_url: https://sso.${BASE_DOMAIN}/auth/realms/master/protocol/openid-connect/logout?redirect_uri=https://grafana.local.${BASE_DOMAIN}/login
          token_url: https://sso.${BASE_DOMAIN}/auth/realms/master/protocol/openid-connect/token
          role_attribute_path: contains(realm_access.roles[*], 'admin') && 'Admin' || contains(realm_access.roles[*], 'editor') && 'Editor' || 'Viewer'
        server:
          root_url: https://grafana.local.${BASE_DOMAIN}
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: default
              orgId: 1
              folder: ""
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          flux-cluster:
            url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/cluster.json
            datasource: Prometheus
          flux-control-plane:
            url: https://raw.githubusercontent.com/fluxcd/flux2/main/manifests/monitoring/grafana/dashboards/control-plane.json
            datasource: Prometheus
          SSL-Certificate-Monitor:
            url: https://raw.githubusercontent.com/gi8lino/k8s-gitops/master/base/monitoring/prometheus-blackbox-exporter/dashboards/SSL-Certificate-Monitor.json
            datasource: Prometheus
          Blackbox-Exporter-Quick-Overview:
            url: https://raw.githubusercontent.com/gi8lino/k8s-gitops/master/base/monitoring/prometheus-blackbox-exporter/dashboards/Blackbox-Exporter-Quick-Overview.json
            datasource: Prometheus
          cloudflare-fw-events:
            url: https://raw.githubusercontent.com/gi8lino/k8s-gitops/master/apps/cloudflare/dashboards/Cloudflare-Firewall-Events.json
            datasource: Elasticsearch
      ingress:
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: traefik-allow-lan-only@kubernetescrd
        enabled: true
        hosts:
          - grafana.local.${BASE_DOMAIN}
        ingressClassName: traefik
        pathType: Prefix
        paths:
          - /
      persistence:
        annotations:
          k8up.syn.tools/backup: "true"
        enabled: true
        storageClassName: nvme
      plugins:
        - grafana-piechart-panel
    kubeControllerManager:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: false
    prometheus:
      ingress:
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: traefik-allow-lan-only@kubernetescrd,traefik-forward-auth@kubernetescrd
        enabled: true
        hosts:
          - prometheus.local.${BASE_DOMAIN}
        ingressClassName: traefik
        pathType: Prefix
        paths:
          - /
      prometheusSpec:
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
    prometheus-node-exporter:
      extraArgs:
        - --collector.filesystem.ignored-mount-points=^/(mnt|dev|proc|sys|var/lib/docker/.+)($|/)
  valuesFrom:
    - kind: Secret
      name: kube-prometheus-stack-helm-values
      optional: false
  install:
    crds: Skip
  upgrade:
    crds: Skip
